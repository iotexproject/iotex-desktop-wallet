# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# meta data describing the account
type AccountMeta {
  address: String!
  balance: String!
  nonce: Int!
  pendingNonce: Int!
}

type Action {
  core: ActionCore!
  senderPubKey: Buffer!
  signature: Buffer!
}

type ActionCore {
  version: Int!
  nonce: BigNumber!
  gasLimit: BigNumber!
  gasPrice: String!
  transfer: Transfer
  execution: Execution
  depositToRewardingFund: DepositToRewardingFund
  claimFromRewardingFund: ClaimFromRewardingFund
  grantReward: GrantReward
}

input ActionCoreInput {
  version: Int!
  nonce: BigNumber!
  gasLimit: BigNumber!
  gasPrice: String!
  transfer: TransferInput
  execution: ExecutionInput
  depositToRewardingFund: DepositToRewardingFundInput
  claimFromRewardingFund: ClaimFromRewardingFundInput
  grantReward: GrantRewardInput
}

type ActionInfo {
  action: Action!
  actHash: String!
  blkHash: String!
}

input ActionInput {
  core: ActionCoreInput!
  senderPubKey: Buffer!
  signature: Buffer!
}

# The BigNumber scalar type represents numeric values with precision as in https://github.com/MikeMcl/bignumber.js/
scalar BigNumber

# Properties of an blockMeta
type BlockMeta {
  hash: String!
  height: Int!
  timestamp: Int!
  numActions: Int!
  producerAddress: String!
  transferAmount: String!
  txRoot: String!
  receiptRoot: String!
  deltaStateDigest: String!
}

# JS Buffer or Uint8Array
scalar Buffer

type ChainMeta {
  height: String!
  numActions: String!
  tps: String!
  epoch: Epoch!
}

type ClaimFromRewardingFund {
  amount: String!
  data: Buffer!
}

input ClaimFromRewardingFundInput {
  amount: String!
  data: Buffer!
}

type CreateDeposit {
  chainID: Int!
  amount: Buffer!
  recipient: String!
}

type DepositToRewardingFund {
  amount: String!
  data: Buffer!
}

input DepositToRewardingFundInput {
  amount: String!
  data: Buffer!
}

# Empty object
scalar Empty

type Epoch {
  num: Float!
  height: Float!
  beaconChainHeight: Float!
}

type Execution {
  amount: String!
  contract: String!
  data: Buffer!
}

input ExecutionInput {
  amount: String!
  contract: String!
  data: Buffer!
}

type GetAccountResponse {
  accountMeta: AccountMeta!
}

input GetActionsByAddressRequest {
  address: String!
  start: BigNumber!
  count: BigNumber!
}

input GetActionsByBlockRequest {
  blkHash: String!
  start: Int!
  count: Int!
}

input GetActionsByHashRequest {
  actionHash: String!
  checkingPending: Boolean!
}

input GetActionsByIndexRequest {
  start: BigNumber!
  count: BigNumber!
}

type GetActionsResponse {
  actionInfo: [ActionInfo!]!
}

input GetBlockMetasByHashRequest {
  blkHash: String!
}

input GetBlockMetasByIndexRequest {
  start: Int!
  count: Int!
}

type GetBlockMetasResponse {
  blkMetas: [BlockMeta!]!
}

type GetReceiptByActionResponse {
  receipt: Receipt!
}

input GetUnconfirmedActionsByAddressRequest {
  address: String!
  start: Int!
  count: Int!
}

type GrantReward {
  type: RewardType!
}

input GrantRewardInput {
  type: RewardType!
}

# Properties of an Log
type Log {
  address: String!
  topics: Buffer!
  data: Buffer!
  blockNumber: Int!
  txnHash: Buffer!
  index: Int!
}

# scalar type of map buffer
scalar Map

type MerkleRoot {
  name: String!
  value: Buffer!
}

type PlumChallengeExit {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  challengeTransferBlockProof: Buffer!
  challengeTransferBlockHeight: Int!
}

type PlumCreateDeposit {
  subChainAddress: String!
  amount: Buffer!
  recipient: String!
}

type PlumFinalizeExit {
  subChainAddress: String!
  coinID: Int!
}

type PlumPutBlock {
  subChainAddress: String!
  height: Int!
  roots: Map!
}

type PlumResponseChallengeExit {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  responseTransfer: Buffer!
  responseTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
}

type PlumSettleDeposit {
  coinID: Int!
}

type PlumStartExit {
  subChainAddress: String!
  previousTransfer: Buffer!
  previousTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
  exitTransfer: Buffer!
  exitTransferBlockProof: Buffer!
  exitTransferBlockHeight: Int!
}

type PlumTransfer {
  coinID: Int!
  denomination: Buffer!
  owner: String!
  recipient: String!
}

type PutBlock {
  subChainAddress: String!
  height: Int!
  roots: [MerkleRoot!]!
}

type Query {
  chainMeta: ChainMeta!
  getAccount(
    # iotex address
    address: String!
  ): GetAccountResponse!
  getBlockMetas(
    byIndex: GetBlockMetasByIndexRequest
    byHash: GetBlockMetasByHashRequest
  ): GetBlockMetasResponse!
  suggestGasPrice: SuggestGasPriceResponse!
  getReceiptByAction(
    # actionHash
    actionHash: String!
  ): GetReceiptByActionResponse!
  getActions(
    byIndex: GetActionsByIndexRequest
    byAddr: GetActionsByAddressRequest
    byHash: GetActionsByHashRequest
  ): GetActionsResponse!
  readContract(action: ActionInput!): ReadContractResponse!
  sendAction(action: ActionInput!): Empty!
  health: String!
}

type ReadContractResponse {
  data: String!
}

# Properties of an Receipt
type Receipt {
  returnValue: Buffer!
  status: Int!
  actHash: Buffer!
  gasConsumed: Int!
  contractAddress: String!
  logs: [Log!]!
}

enum RewardType {
  BlockReward
  EpochReward
}

type SetReward {
  amount: Buffer!
  data: Buffer!
  type: Int!
}

type SettleDeposit {
  amount: Buffer!
  recipient: String!
  index: Int!
}

type StartSubChain {
  chainID: Int!
  securityDeposit: Buffer!
  operationDeposit: Buffer!
  startHeight: Int!
  parentHeightOffset: Int!
}

type StopSubChain {
  chainID: Int!
  stopHeight: Int!
  subChainAddress: String!
}

type SuggestGasPriceResponse {
  gasPrice: Int!
}

type TerminatePlumChain {
  subChainAddress: String!
}

type Timestamp {
  seconds: Int!
  nanos: Int!
}

type Transfer {
  amount: String!
  recipient: String!
  payload: Buffer!
}

input TransferInput {
  amount: String!
  recipient: String!
  payload: Buffer!
}

type Vote {
  timestamp: Timestamp!
  voteeAddress: String!
}
