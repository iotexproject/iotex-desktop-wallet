# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

# meta data describing the account
type AccountMeta {
  # iotex address
  address: String!
  balance: String!
  nonce: Int!
  pendingNonce: Int!
  numActions: Int!
}

type Action {
  core: ActionCore!
  senderPubKey: Buffer!
  signature: Buffer!
}

type ActionCore {
  version: Int!
  nonce: BigNumber!
  gasLimit: BigNumber!
  gasPrice: String!
  transfer: Transfer
  vote: Vote
  execution: Execution
  startSubChain: StartSubChain
  stopSubChain: StopSubChain
  putBlock: PutBlock
  createDeposit: CreateDeposit
  settleDeposit: SettleDeposit
  createPlumChain: CreatePlumChain
  terminatePlumChain: TerminatePlumChain
  plumPutBlock: PlumPutBlock
  plumCreateDeposit: PlumCreateDeposit
  plumStartExit: PlumStartExit
  plumChallengeExit: PlumChallengeExit
  plumResponseChallengeExit: PlumResponseChallengeExit
  plumFinalizeExit: PlumFinalizeExit
  plumSettleDeposit: PlumSettleDeposit
  plumTransfer: PlumTransfer
  depositToRewardingFund: DepositToRewardingFund
  claimFromRewardingFund: ClaimFromRewardingFund
  grantReward: GrantReward
  putPollResult: PutPollResult
}

input ActionCoreInput {
  version: Int!
  nonce: BigNumber!
  gasLimit: BigNumber!
  gasPrice: String!
  transfer: TransferInput
  vote: VoteInput
  execution: ExecutionInput
  startSubChain: StartSubChainInput
  stopSubChain: StopSubChainInput
  putBlock: PutBlockInput
  createDeposit: CreateDepositInput
  settleDeposit: SettleDepositInput
  createPlumChain: CreatePlumChainInput
  terminatePlumChain: TerminatePlumChainInput
  plumPutBlock: PlumPutBlockInput
  plumCreateDeposit: PlumCreateDepositInput
  plumStartExit: PlumStartExitInput
  plumChallengeExit: PlumChallengeExitInput
  plumResponseChallengeExit: PlumResponseChallengeExitInput
  plumFinalizeExit: PlumFinalizeExitInput
  plumSettleDeposit: PlumSettleDepositInput
  plumTransfer: PlumTransferInput
  depositToRewardingFund: DepositToRewardingFundInput
  claimFromRewardingFund: ClaimFromRewardingFundInput
  grantReward: GrantRewardInput
  putPollResult: PutPollResultInput
}

type ActionInfo {
  action: Action!
  actHash: String!
  blkHash: String!
  block: BlockMeta!
}

input ActionInput {
  core: ActionCoreInput!
  senderPubKey: Buffer!
  signature: Buffer!
}

# The BigNumber scalar type represents numeric values with precision as in https://github.com/MikeMcl/bignumber.js/
scalar BigNumber

# Properties of an blockMeta
type BlockMeta {
  hash: String!
  height: Int!
  timestamp: Int!
  numActions: Int!
  producerAddress: String!
  transferAmount: String!
  txRoot: String!
  receiptRoot: String!
  deltaStateDigest: String!
}

# JS Buffer or Uint8Array
scalar Buffer

type Candidate {
  address: String!
  votes: Buffer
  pubKey: Buffer
  rewardAddress: String!
}

input CandidateInput {
  address: String!
  votes: Buffer
  pubKey: Buffer
  rewardAddress: String!
}

type CandidateList {
  candidates: [Candidate!]!
}

input CandidateListInput {
  candidates: [CandidateInput!]!
}

type ChainMeta {
  height: String!
  numActions: String!
  tps: String!
  epoch: Epoch!
}

type ClaimFromRewardingFund {
  amount: String!
  data: Buffer!
}

input ClaimFromRewardingFundInput {
  amount: String!
  data: Buffer!
}

# IOTX price information from coinmarketcap
type CoinPrice {
  priceUsd: String!
  marketCapUsd: String!
}

type CreateDeposit {
  chainID: Int!
  amount: Buffer!
  recipient: String!
}

input CreateDepositInput {
  chainID: Int!
  amount: Buffer!
  recipient: String!
}

type CreatePlumChain {
  TBD: Boolean
}

input CreatePlumChainInput {
  TBD: Boolean
}

type DepositToRewardingFund {
  amount: String!
  data: Buffer!
}

input DepositToRewardingFundInput {
  amount: String!
  data: Buffer!
}

type Epoch {
  num: Float!
  height: Float!
  beaconChainHeight: Float!
}

# Properties of a EstimateGasForActionResponse
type EstimateGasForActionResponse {
  gas: String!
}

type Execution {
  amount: String!
  contract: String!
  data: Buffer!
}

input ExecutionInput {
  amount: String!
  contract: String!
  data: Buffer!
}

type GetAccountResponse {
  accountMeta: AccountMeta!
}

input GetActionsByAddressRequest {
  # iotex address
  address: String!
  start: BigNumber!
  count: BigNumber!
}

input GetActionsByBlockRequest {
  blkHash: String!
  start: Int!
  count: Int!
}

input GetActionsByHashRequest {
  actionHash: String!
  checkingPending: Boolean!
}

input GetActionsByIndexRequest {
  start: BigNumber!
  count: BigNumber!
}

type GetActionsResponse {
  actionInfo: [ActionInfo!]
}

input GetBlockMetasByHashRequest {
  blkHash: String!
}

input GetBlockMetasByIndexRequest {
  start: Int!
  count: Int!
}

type GetBlockMetasResponse {
  blkMetas: [BlockMeta!]!
}

type GetReceiptByActionResponse {
  receipt: Receipt!
}

input GetUnconfirmedActionsByAddressRequest {
  # iotex address
  address: String!
  start: Int!
  count: Int!
}

type GrantReward {
  type: RewardType!
}

input GrantRewardInput {
  type: RewardType!
}

# Properties of an Log
type Log {
  # iotex address
  address: String!
  topics: [Buffer!]!
  data: Buffer!
  blockNumber: Int!
  txnHash: Buffer!
  index: Int!
}

# scalar type of map buffer
scalar Map

type MerkleRoot {
  name: String!
  value: Buffer!
}

input MerkleRootInput {
  name: String!
  value: Buffer!
}

type PlumChallengeExit {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  challengeTransferBlockProof: Buffer!
  challengeTransferBlockHeight: Int!
}

input PlumChallengeExitInput {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  challengeTransferBlockProof: Buffer!
  challengeTransferBlockHeight: Int!
}

type PlumCreateDeposit {
  subChainAddress: String!
  amount: Buffer!
  recipient: String!
}

input PlumCreateDepositInput {
  subChainAddress: String!
  amount: Buffer!
  recipient: String!
}

type PlumFinalizeExit {
  subChainAddress: String!
  coinID: Int!
}

input PlumFinalizeExitInput {
  subChainAddress: String!
  coinID: Int!
}

type PlumPutBlock {
  subChainAddress: String!
  height: Int!
  roots: Map!
}

input PlumPutBlockInput {
  subChainAddress: String!
  height: Int!
  roots: Map!
}

type PlumResponseChallengeExit {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  responseTransfer: Buffer!
  responseTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
}

input PlumResponseChallengeExitInput {
  subChainAddress: String!
  coinID: Int!
  challengeTransfer: Buffer!
  responseTransfer: Buffer!
  responseTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
}

type PlumSettleDeposit {
  coinID: Int!
}

input PlumSettleDepositInput {
  coinID: Int!
}

type PlumStartExit {
  subChainAddress: String!
  previousTransfer: Buffer!
  previousTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
  exitTransfer: Buffer!
  exitTransferBlockProof: Buffer!
  exitTransferBlockHeight: Int!
}

input PlumStartExitInput {
  subChainAddress: String!
  previousTransfer: Buffer!
  previousTransferBlockProof: Buffer!
  previousTransferBlockHeight: Int!
  exitTransfer: Buffer!
  exitTransferBlockProof: Buffer!
  exitTransferBlockHeight: Int!
}

type PlumTransfer {
  coinID: Int!
  denomination: Buffer!
  owner: String!
  recipient: String!
}

input PlumTransferInput {
  coinID: Int!
  denomination: Buffer!
  owner: String!
  recipient: String!
}

type PutBlock {
  subChainAddress: String!
  height: Int!
  roots: [MerkleRoot!]!
}

input PutBlockInput {
  subChainAddress: String!
  height: Int!
  roots: [MerkleRootInput!]!
}

type PutPollResult {
  height: String!
  candidates: CandidateList
}

input PutPollResultInput {
  height: String!
  candidates: CandidateListInput
}

type Query {
  # get chain metadata
  chainMeta: ChainMeta!

  # get the address detail of an address
  getAccount(
    # iotex address
    address: String!
  ): GetAccountResponse!

  # get block metadata(s) by:
  getBlockMetas(
    # start index and block count
    byIndex: GetBlockMetasByIndexRequest

    # block hash
    byHash: GetBlockMetasByHashRequest
  ): GetBlockMetasResponse!

  # suggest gas price
  suggestGasPrice: SuggestGasPriceResponse!

  # get receipt by action Hash
  getReceiptByAction(
    # action Hash
    actionHash: String!
  ): GetReceiptByActionResponse!

  # get action(s) by:
  getActions(
    # start index and action count
    byIndex: GetActionsByIndexRequest

    # address with start index and action count
    byAddr: GetActionsByAddressRequest

    # action hash
    byHash: GetActionsByHashRequest
    byBlk: GetActionsByBlockRequest
  ): GetActionsResponse!

  # read contract
  readContract(action: ActionInput!): ReadContractResponse!

  # sendAction
  sendAction(action: ActionInput!): SendActionResponse!

  # estimate gas for action
  estimateGasForAction(action: ActionInput!): EstimateGasForActionResponse!
  health: String!
  fetchCoinPrice: CoinPrice!
}

type ReadContractResponse {
  data: String!
}

# Properties of an Receipt
type Receipt {
  returnValue: Buffer!
  status: Int!
  actHash: Buffer!
  gasConsumed: Int!
  contractAddress: String!
  logs: [Log!]!
}

enum RewardType {
  BlockReward
  EpochReward
}

type SendActionResponse {
  TBD: Boolean
}

type SetReward {
  amount: Buffer!
  data: Buffer!
  type: Int!
}

input SetRewardInput {
  amount: Buffer!
  data: Buffer!
  type: Int!
}

type SettleDeposit {
  amount: Buffer!
  recipient: String!
  index: Int!
}

input SettleDepositInput {
  amount: Buffer!
  recipient: String!
  index: Int!
}

type StartSubChain {
  chainID: Int!
  securityDeposit: Buffer!
  operationDeposit: Buffer!
  startHeight: Int!
  parentHeightOffset: Int!
}

input StartSubChainInput {
  chainID: Int!
  securityDeposit: Buffer!
  operationDeposit: Buffer!
  startHeight: Int!
  parentHeightOffset: Int!
}

type StopSubChain {
  chainID: Int!
  stopHeight: Int!
  subChainAddress: String!
}

input StopSubChainInput {
  chainID: Int!
  stopHeight: Int!
  subChainAddress: String!
}

type SuggestGasPriceResponse {
  gasPrice: Int!
}

type TerminatePlumChain {
  subChainAddress: String!
}

input TerminatePlumChainInput {
  subChainAddress: String!
}

type Timestamp {
  seconds: Int!
  nanos: Int!
}

input TimestampInput {
  seconds: Int!
  nanos: Int!
}

type Transfer {
  amount: String!
  recipient: String!
  payload: Buffer!
}

input TransferInput {
  amount: String!
  recipient: String!
  payload: Buffer!
}

type Vote {
  timestamp: Timestamp!
  voteeAddress: String!
}

input VoteInput {
  timestamp: TimestampInput!
  voteeAddress: String!
}
